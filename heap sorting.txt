#include<bits/stdc++.h>
using namespace std;
template<typename T> class MaxHeab {
    T *arr;
    int length;
    int mx;
public:
    MaxHeab(int sz =1)
    {
        mx = sz;
        length = 0;
        arr = new T[mx];
    }
    int parent(int i)
    {
        return (i-1)/2;
    }
    void heapify(int i,int n)///O(nlog(n))
    {
        int left=2*i+1;
        int right=2*i+2;
        int max=i;
        if(left<n && arr[left]>arr[max])
        {
            max=left;
        }
        if(right<n and arr[right]>arr[max])
        {
            max=right;
        }
        if(max!=i)
        {
            swap(arr[i],arr[max]);
            heapify(max,n);
        }


    }
    void buildheap()
    {
        for (int i = (length / 2) - 1; i >= 0; i--)
        {
            heapify(i, length);
        }
    }
    void insert(T element)
    {
        if (length == mx) {
            mx *= 2;
            T* tmp = new T[mx];
            for (int i = 0; i < length; i++) {
                tmp[i] = arr[i];
            }
            delete[] arr;
            arr = tmp;
        }
        arr[length] = element;
        length++;
        buildheap();

    }
    void erase(int i)
    {
        sort();
        if(i<0 or i>=length)
        {
            cout<<"out of range"<<endl;
            return;
        }
       // cout<<i<<" "<<arr[i]<<" "<<length<<endl;
        arr[i]=arr[length-1];
        length--;
        //buildheap();
        heapify(i,length);

    }
    void sort()
    {
        buildheap();
        for (int i = length - 1; i > 0; i--)
        {
            swap(arr[0], arr[i]);
            heapify(0, i);  // heapify the reduced heap
        }
    }

    void display()
    {
        for(int i=0;i<length;i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }



};
int main()
{
    MaxHeab <int>h(15);
    h.insert(3);
    h.insert(10);
    h.insert(12);
    h.insert(8);
    h.insert(2);
    h.insert(14);
    h.sort();
    h.erase(5);
    h.sort();
    h.display();
}

